doctype html
html
	head
		meta(charset="utf-8")
		title Contains Point
		script(src="../build/bu.js")
		style.

			html, body {
				margin: 0;
				width: 100%;
				height: 100%;
				overflow: hidden;
			}

			#info {
				position: absolute;
				width: 100%;
				text-align: center;
				padding: 8px 0;
			}

		script(type="text/javascript").

			var bu = new Bu.App({
				canvas: {
					cursor: 'crosshair',
					showKeyPoints: true,
				},
				data: {
					mousePos: new Bu.Point(),
				},
				objects: function () {
					this.randomizer = new Bu.ShapeRandomizer();

					// circle,
					return {
						circle: this.randomizer.generateCircle(),
						triangle: this.randomizer.generateTriangle(),
						rectangle: this.randomizer.generateRectangle(),
						fan: this.randomizer.generateFan(),
						bow: this.randomizer.generateBow(),
						polygon: this.randomizer.generatePolygon(),
					};
				},
				hierarchy: {
					circle: {},
					triangle: {},
					fan: {},
					bow: {},
					polygon:{},
				},
				init: function () {
					this.randomizer.setRange(this.$canvas.width, this.$canvas.height);
					// Add bounds
					for (var i in this.$canvas.shapes) {
						if (!this.$canvas.shapes.hasOwnProperty(i)) continue;
						this.$canvas.shapes[i].bounds = new Bu.Bounds(this.$canvas.shapes[i]);
					}
				},
				methods: {
					regenerateShapes: function () {
						console.log("TODO: implement Bu.ShapeRandomizer.randomize(shape);");
					},
				},
				events: {
					mousemove: function (e) {
						this.mousePos.x = e.offsetX;
						this.mousePos.y = e.offsetY;
						for (var i in this.$canvas.shapes) {
							if (!this.$canvas.shapes.hasOwnProperty(i)) continue;
							var shape = this.$canvas.shapes[i];
							if (shape.containsPoint(this.mousePos))
								shape.fill(Bu.DEFAULT_FILL_STYLE_HOVER);
							else
								shape.fill();
						}
					},
					mouseup: function () {
						this.regenerateShapes();
					},
				},
			});

	body
		div#info Move cursor to test.
		// Click to regenerate shapes.
